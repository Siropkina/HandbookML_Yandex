from sklearn.base import RegressorMixin
import numpy as np

class CityMeanRegressor(RegressorMixin):
    def __init__(self):
        self.mean_dict = {}  # Dictionary to store mean values by city

    def fit(self, X, y):
        """
        Train the model on data.

        Parameters:
        X (DataFrame): Training data with a 'city' column.
        y (Series): Target values for mean check.
        """
        # Group data by city
        grouped = X.groupby('city')

        # Calculate the mean for each city and save it to the dictionary
        for city, group_data in grouped:
            mean_value = np.mean(y[group_data.index])  # Calculate mean check value
            self.mean_dict[city] = mean_value

        return self

    def predict(self, X):
        """
        Predict mean check based on the trained model.

        Parameters:
        X (DataFrame): Data for prediction with a 'city' column.

        Returns:
        numpy.ndarray: Array of predicted mean check values.
        """
        predictions = []

        for _, row in X.iterrows():
            city = row['city']
            # Use mean value if city exists in the trained model
            if city in self.mean_dict:
                mean_prediction = self.mean_dict[city]
                predictions.append(mean_prediction)
            else:
                # Predict zero if city is not in the trained model
                predictions.append(0)

        return np.array(predictions)
